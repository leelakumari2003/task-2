# -*- coding: utf-8 -*-
"""task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k7kqnq_THzdSmFm5hFx2aIGTCWJ1BqS0
"""

from sklearn.datasets import load_iris
iris_dataset=load_iris()

print("keys of iris_dataset:\n{}".format(iris_dataset.keys()))

print(iris_dataset['DESCR'][:193] + "\n...")

print("Target names: {}".format(iris_dataset['target_names']))

print("Feature names: \n{}".format(iris_dataset['feature_names']))

print("Type of data: {}".format(type(iris_dataset['data'])))

print("Shape of data: {}".format(iris_dataset['data'].shape))

print("First five rows of data:\n{}".format(iris_dataset['data'][:5]))

print("Type of target: {}".format(type(iris_dataset['target'])))

print("Shape of target: {}".format(iris_dataset['target'].shape))

print("Target:\n{}".format(iris_dataset['target']))

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(iris_dataset['data'],iris_dataset['target'],random_state=0)

print("x_train shape: {}".format(x_train.shape))
print("y_train shape: {}".format(y_train.shape))

print("x_test shape: {}".format(x_test.shape))
print("y_test shape: {}".format(y_test.shape))

# Commented out IPython magic to ensure Python compatibility.
# %pip install mglearn

import pandas as pd
import mglearn

iris_dataframe=pd.DataFrame(x_train,columns=iris_dataset.feature_names)
pd.plotting.scatter_matrix(iris_dataframe,c=y_train,figsize=(15,15),alpha=.8,cmap=mglearn.cm3)

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=1)

knn.fit(x_train,y_train)

import numpy as np

x_new=np.array([[5,2.9,1,0.2]])
print("x_new.shape: {}".format(x_new.shape))

prediction=knn.predict(x_new)
print("Prediction: {}".format(prediction))
print("predicted target name: {}".format(iris_dataset['target_names'][prediction]))

y_pred=knn.predict(x_test)
print("Test set predictions:\n {}".format(y_pred))

print("Test score: {:.2f}".format(np.mean(y_pred == y_test)))

print("Test set score: {:.2f}".format(knn.score(x_test,y_test)))